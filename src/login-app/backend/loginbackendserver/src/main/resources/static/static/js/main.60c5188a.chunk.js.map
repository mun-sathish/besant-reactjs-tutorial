{"version":3,"sources":["login-app/client/configs/index.js","login-app/client/pages/DashboardPage.js","login-app/client/pages/LoginPage.js","login-app/client/pages/RegisterPage.js","login-app/client/index.js","serviceWorker.js","index.js"],"names":["BASE_URI","URIs","LOGIN","LOGOUT","DASHBOARD","ADD_USER","ROUTE_PATH","DashboardPage","props","handleLogout","userData","JSON","parse","localStorage","getItem","Axios","get","username","then","response","removeItem","history","push","data","replace","state","isLoggedIn","dashboardData","this","token","setState","onClick","stringify","Component","LoginPage","useState","setUsername","password","setPassword","usernameErr","setUsernameErr","passwordErr","setPasswordErr","loginErr","setLoginErr","style","padding","onSubmit","e","preventDefault","length","message","setItem","type","placeholder","defaultValue","onChange","target","value","color","match","to","RegisterPage","cpassword","setCPassword","cpasswordErr","setCPasswordErr","registerErr","setRegisterErr","post","info","LoginApp","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.60c5188a.chunk.js","sourcesContent":["const BASE_URI = \"http://localhost:8080\";\r\n\r\nexport const URIs = {\r\n    LOGIN: BASE_URI + \"/login\",\r\n    LOGOUT: BASE_URI + \"/logout\",\r\n    DASHBOARD: BASE_URI + \"/dashboard\",\r\n    ADD_USER: BASE_URI + \"/user\",\r\n};\r\n\r\nexport const STORAGE_IS_LOGGED_IN = \"isUserLoggedIn\";\r\nexport const STORAGE_USER_DATA = \"userData\";\r\n\r\nexport const ROUTE_PATH = {\r\n    DEFAULT: \"/\",\r\n    DASHBOARD: \"/dashboard\",\r\n    LOGIN: \"/login\",\r\n    REGISTER: \"/register\",\r\n};\r\n","import React, { Component } from \"react\";\r\nimport {\r\n    STORAGE_IS_LOGGED_IN,\r\n    ROUTE_PATH,\r\n    URIs,\r\n    STORAGE_USER_DATA,\r\n} from \"../configs\";\r\nimport Axios from \"axios\";\r\n\r\nexport default class DashboardPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let data = localStorage.getItem(STORAGE_IS_LOGGED_IN);\r\n        if (!data || data !== \"true\") {\r\n            this.props.history.replace(ROUTE_PATH.LOGIN);\r\n        }\r\n\r\n        this.state = {\r\n            isLoggedIn: !(!data || data !== \"true\"),\r\n            dashboardData: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.state.isLoggedIn) return;\r\n        let userData = JSON.parse(localStorage.getItem(STORAGE_USER_DATA));\r\n        Axios.get(\r\n            URIs.DASHBOARD +\r\n                \"?username=\" +\r\n                userData.username +\r\n                \"&token=\" +\r\n                userData.token\r\n        ).then((response) => {\r\n            this.setState({ dashboardData: response.data });\r\n        });\r\n    }\r\n\r\n    handleLogout = () => {\r\n        let userData = JSON.parse(localStorage.getItem(STORAGE_USER_DATA));\r\n        Axios.get(URIs.LOGOUT + \"?username=\" + userData.username).then(\r\n            (response) => {\r\n                localStorage.removeItem(STORAGE_IS_LOGGED_IN);\r\n                localStorage.removeItem(STORAGE_USER_DATA);\r\n                this.props.history.push(ROUTE_PATH.LOGIN);\r\n            }\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.handleLogout}>Logout</button>\r\n                {JSON.stringify(this.state.dashboardData)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\nimport {\r\n    URIs,\r\n    STORAGE_IS_LOGGED_IN,\r\n    ROUTE_PATH,\r\n    STORAGE_USER_DATA,\r\n} from \"../configs\";\r\n\r\nexport default function LoginPage({ history }) {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [usernameErr, setUsernameErr] = useState(\"\");\r\n    const [passwordErr, setPasswordErr] = useState(\"\");\r\n    const [loginErr, setLoginErr] = useState(\"\");\r\n\r\n    const handleSubmit = (e) => {\r\n        setLoginErr(\"\");\r\n        e.preventDefault();\r\n        if (\r\n            usernameErr.length > 0 ||\r\n            passwordErr.length > 0 ||\r\n            username.length == 0 ||\r\n            password.length == 0\r\n        ) {\r\n            return;\r\n        }\r\n        Axios.get(\r\n            URIs.LOGIN + \"?username=\" + username + \"&password=\" + password\r\n        ).then((response) => {\r\n            const { data } = response;\r\n            if (data.message === \"SUCCESS\") {\r\n                localStorage.setItem(STORAGE_IS_LOGGED_IN, \"true\");\r\n                localStorage.setItem(\r\n                    STORAGE_USER_DATA,\r\n                    JSON.stringify({ username, token: data.token })\r\n                );\r\n                history.push(ROUTE_PATH.DASHBOARD);\r\n            } else {\r\n                setLoginErr(data.message);\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleUsername = (e) => {\r\n        e.preventDefault();\r\n        if (e.target.value.length > 10) {\r\n            setUsernameErr(\"Enter a valid Username\");\r\n        } else {\r\n            setUsernameErr(\"\");\r\n            setUsername(e.target.value);\r\n        }\r\n    };\r\n\r\n    const handlePassword = (e) => {\r\n        e.preventDefault();\r\n        var passRegex = /^[A-Za-z]\\w{7,14}$/;\r\n        if (!e.target.value.match(passRegex)) {\r\n            setPasswordErr(\"Enter a valid Password\");\r\n        } else {\r\n            setPasswordErr(\"\");\r\n            setPassword(e.target.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form style={{ padding: \"10px\" }} onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Username\"\r\n                    defaultValue={username}\r\n                    onChange={handleUsername}\r\n                />\r\n                <br />\r\n                <b style={{ color: \"red\" }}>{usernameErr}</b>\r\n                <br />\r\n                <br />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Enter Password\"\r\n                    defaultValue={password}\r\n                    onChange={handlePassword}\r\n                />\r\n                <br />\r\n                <b style={{ color: \"red\" }}>{passwordErr}</b>\r\n                <br />\r\n                <br />\r\n                <input type=\"submit\" value=\"Login\" />\r\n                <br />\r\n                <b style={{ color: \"red\" }}>{loginErr}</b>\r\n                <br />\r\n                <br />\r\n                <Link to=\"/register\">\r\n                    <p style={{ color: \"blue\" }}>New User? Register a User</p>\r\n                </Link>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\nimport { URIs, ROUTE_PATH } from \"../configs\";\r\nimport { message } from \"antd\";\r\n\r\nexport default function RegisterPage({ history }) {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [cpassword, setCPassword] = useState(\"\");\r\n    const [usernameErr, setUsernameErr] = useState(\"\");\r\n    const [passwordErr, setPasswordErr] = useState(\"\");\r\n    const [cpasswordErr, setCPasswordErr] = useState(\"\");\r\n    const [registerErr, setRegisterErr] = useState(\"\");\r\n\r\n    const handleSubmit = (e) => {\r\n        setRegisterErr(\"\");\r\n        e.preventDefault();\r\n        if (\r\n            usernameErr.length > 0 ||\r\n            passwordErr.length > 0 ||\r\n            cpasswordErr.length > 0 ||\r\n            username.length == 0 ||\r\n            password.length == 0\r\n        ) {\r\n            return;\r\n        }\r\n        Axios.post(URIs.ADD_USER, {\r\n            username: username,\r\n            password: password,\r\n        }).then((response) => {\r\n            const { data } = response;\r\n            if (data.message === \"SUCCESS\") {\r\n                message.info(\"User Registration is succesful\");\r\n                history.push(ROUTE_PATH.LOGIN);\r\n            } else {\r\n                setRegisterErr(data.message);\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleUsername = (e) => {\r\n        e.preventDefault();\r\n        if (e.target.value.length > 10) {\r\n            setUsernameErr(\"Enter a valid Username\");\r\n        } else {\r\n            setUsernameErr(\"\");\r\n            setUsername(e.target.value);\r\n        }\r\n    };\r\n\r\n    const handlePassword = (e) => {\r\n        e.preventDefault();\r\n        var passRegex = /^[A-Za-z]\\w{7,14}$/;\r\n        if (!e.target.value.match(passRegex)) {\r\n            setPasswordErr(\"Enter a valid Password\");\r\n        } else {\r\n            setPasswordErr(\"\");\r\n            setPassword(e.target.value);\r\n        }\r\n    };\r\n\r\n    const handleCPassword = (e) => {\r\n        e.preventDefault();\r\n        if (e.target.value !== password) {\r\n            setCPasswordErr(\"Password Does not match\");\r\n        } else {\r\n            setCPasswordErr(\"\");\r\n            setCPassword(e.target.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form style={{ padding: \"10px\" }} onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Username\"\r\n                    defaultValue={username}\r\n                    onChange={handleUsername}\r\n                />\r\n                <br />\r\n                <b style={{ color: \"red\" }}>{usernameErr}</b>\r\n                <br />\r\n                <br />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Enter Password\"\r\n                    defaultValue={password}\r\n                    onChange={handlePassword}\r\n                />\r\n                <br />\r\n                <b style={{ color: \"red\" }}>{passwordErr}</b>\r\n                <br />\r\n                <br />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Enter Confirm Password\"\r\n                    defaultValue={cpassword}\r\n                    onChange={handleCPassword}\r\n                />\r\n                <br />\r\n                <b style={{ color: \"red\" }}>{cpasswordErr}</b>\r\n                <br />\r\n                <br />\r\n                <input type=\"submit\" value=\"Register User\" />\r\n                <br />\r\n                <b style={{ color: \"red\" }}>{registerErr}</b>\r\n                <br />\r\n                <br />\r\n                <Link to=\"/login\">\r\n                    <p style={{ color: \"blue\" }}>Sign In</p>\r\n                </Link>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport DashboardPage from \"./pages/DashboardPage\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\nimport RegisterPage from \"./pages/RegisterPage\";\r\nimport { ROUTE_PATH, STORAGE_IS_LOGGED_IN, STORAGE_USER_DATA } from \"./configs\";\r\n\r\nexport default function LoginApp() {\r\n    // localStorage.removeItem(STORAGE_IS_LOGGED_IN);\r\n    // localStorage.removeItem(STORAGE_USER_DATA);\r\n\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route\r\n                    exact\r\n                    path={ROUTE_PATH.DEFAULT}\r\n                    component={DashboardPage}\r\n                />\r\n                <Route\r\n                    exact\r\n                    path={ROUTE_PATH.DASHBOARD}\r\n                    component={DashboardPage}\r\n                />\r\n                <Route exact path={ROUTE_PATH.LOGIN} component={LoginPage} />\r\n                <Route\r\n                    exact\r\n                    path={ROUTE_PATH.REGISTER}\r\n                    component={RegisterPage}\r\n                />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport ClientApp from \"./login-app/client\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(<ClientApp />, document.getElementById(\"root\"));\n\n// setTimeout(() => {\n//     ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n// }, 2000);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}